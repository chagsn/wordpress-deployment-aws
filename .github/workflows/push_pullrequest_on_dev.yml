name: "Terraform deployment on dev"
on:
  push:
    branches:
      - charlotte-dev
    paths-ignore:
      - "README.md"
  pull_request:
    branches:
      - dev
    paths-ignore:
      - "README.md"
permissions:
    id-token: write # This is required for aws oidc connection
    contents: read # This is required for actions/checkout
    pull-requests: write # This is required for gh bot to comment PR
env:
  # TF_LOG: TRACE
  AWS_REGION: ${{ secrets.AWS_REGION }}
  TF_WORKSPACE: dev
  tfplan_artifact_name: tfplan-${{ github.ref_name }}-${{ github.run_id }}-${{ github.run_attempt }}
  tfoutput_artifact_name: tfoutput-${{ github.ref_name }}-${{ github.run_id }}-${{ github.run_attempt }}


jobs:
  Validate:
    name: Validate Terraform code in dev
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: .

    steps:
      - name: Git checkout
        uses: actions/checkout@master

      - name: Configure AWS credentials from AWS account
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id:  ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.2.5
      
      - name: Terraform init
        id: init
        run: terraform -chdir=terraform init

      - name: Terraform format
        id: format
        run: terraform -chdir=terraform fmt -check
        continue-on-error: true

      - name: Terraform validate
        id: validate
        run: terraform -chdir=terraform validate -no-color

  Test-policy:
          name: Test Terraform code in dev with tfsec
          runs-on: ubuntu-latest
      
          steps:
            - name: Git checkout
              uses: actions/checkout@master
      
            - name: tfsec
              uses: aquasecurity/tfsec-action@v1.0.0
              with:
                working_directory: ./terraform
                soft_fail: true
  
  Build:
    name: Build Terraform plan for dev
    needs: [Validate,Test-policy]
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: .

    steps:
      - name: Git checkout
        uses: actions/checkout@master

      - name: Configure AWS credentials from AWS account
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id:  ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.2.5
      
      - name: Terraform init
        id: init
        run: terraform -chdir=terraform init

      - name: Terraform plan
        id: plan
        run: terraform -chdir=terraform plan -out $tfplan_artifact_name
        # if: github.event_name == 'pull_request'
        continue-on-error: true

      - name: Comment on Pull Request
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            }) 

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Upload artifact for deployment
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.TF_WORKSPACE }}-terraform-plan
          path: ./terraform/${{ env.tfplan_artifact_name }}
          if-no-files-found: error

          
  Deploy:
    name: Deploy infrastructure in dev
    needs: [Build]
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: .

    steps:
       - name: Git checkout
         uses: actions/checkout@master
 
       - name: Configure AWS credentials from AWS account
         uses: aws-actions/configure-aws-credentials@v1
         with:
           aws-access-key-id:  ${{ secrets.AWS_ACCESS_KEY_ID }}
           aws-secret-access-key:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}
           aws-region: ${{ secrets.AWS_REGION }}
 
       - name: Setup Terraform
         uses: hashicorp/setup-terraform@v2
         with:
           terraform_version: 1.2.5
       
       - name: Terraform init
         id: init
         run: terraform -chdir=terraform init

       - name: Download artifact for deployment
         uses: actions/download-artifact@v3
         with:
           name: ${{ env.TF_WORKSPACE }}-terraform-plan
           path: ./terraform/
           if-no-files-found: error
  
       - name: Terraform apply
         id: apply
         run: terraform -chdir=terraform apply $tfplan_artifact_name

       - name: Terraform output
         id: output
         run: terraform -chdir=terraform output > ./terraform/terraform.output
      
       - name: Clean artifact (required for tests)
         run: |
           ls -l ./terraform
           cat ./terraform/terraform.output
           sed 1d <./terraform/terraform.output >./terraform/terraform.output.1
           sed '/^::debug/d' <terraform.output.1 >./terraform/terraform.output.2
           mv ./terraform/terraform.output.2 ./terraform/$tfoutput_artifact_name
           cat ./terraform/$tfoutput_artifact_name
 
       - name: Upload terraform output artifact for tests
         uses: actions/upload-artifact@v3
         with:
           name: ${{ env.TF_WORKSPACE }}-terraform-output
           path: ./terraform/${{ env.tfoutput_artifact_name }}
           if-no-files-found: error
 
           
  Test-deployment:
   name: Test infrastructure deployment
   needs: [Deploy]
   runs-on: ubuntu-latest
   defaults:
     run:
       shell: bash
       working-directory: .

   steps:
      - name: Git checkout
        uses: actions/checkout@master

      - name: Configure AWS credentials from AWS account
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id:  ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.10.12

      - name: Install pytest and other dependencies
        run: pip install pytest pytest-md pytest-emoji

      - name: Download artifact for tests
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.TF_WORKSPACE }}-terraform-output
          path: ./pytest/
          if-no-files-found: error
 
      - name: Rename and clean artifact for tests
        run: mv pytest/$tfoutput_artifact_name pytest/terraform_output.py

      - name: Run pytest to test infrastructure
        uses: pavelzw/pytest-action@v2
        with:
          custom-arguments: './pytest/test_wordpress_infra_for_pipeline.py -s'
          emoji: true
          verbose: true
          job-summary: true

      - name: Run pytest to test website url
        uses: pavelzw/pytest-action@v2
        with:
          custom-arguments: './pytest/test_wordpress_url.py -s'
          emoji: true
          verbose: true
          job-summary: true

  # Destroy:
  #   name: Terraform destroy (manual approval)
  #   needs: [Deploy]
  #   runs-on: ubuntu-latest
  #   defaults:
  #     run:
  #       shell: bash
  #       working-directory: .
  
  #   steps:
  #     - name: Git checkout
  #       uses: actions/checkout@master

  #     - name: Configure AWS credentials from AWS account
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         aws-access-key-id:  ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: ${{ secrets.AWS_REGION }}

  #     - name: Setup Terraform
  #       uses: hashicorp/setup-terraform@v2
  #       with:
  #         terraform_version: 1.2.5
      
  #     - name: Terraform init
  #       id: init
  #       run: terraform -chdir=terraform init

  #     - name: Terraform plan
  #       id: plan
  #       run: terraform -chdir=terraform plan

  #     - name: Manual approval for destroy
  #       uses: macnev2013/manual-approval@v1.0.18
  #       with:
  #         # secret: ${{ github.TOKEN }}
  #         # approvers: user1,user2
  #         minimum-approvals: 1
  #         approval-wait: 600
  #         issue-title: 'Manual Approval for destroying dev infa'
  #         issue-body: |
  #           "Do you approve applying terraform destroy on dev deployment? Answer yes or no."

  #     - name: Terraform destroy
  #       id: destroy
  #       run: terraform -chdir=terraform destroy -auto-approve
