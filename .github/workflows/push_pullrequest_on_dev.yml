name: "Terraform deployment on dev"
on:
  push:
    branches:
      - charlotte-dev
    paths-ignore:
      - "README.md"
  pull_request:
    branches:
      - dev
    paths-ignore:
      - "README.md"
permissions:
    id-token: write # This is required for aws oidc connection
    contents: read # This is required for actions/checkout
    pull-requests: write # This is required for gh bot to comment PR
env:
  TF_LOG: TRACE
  AWS_REGION: ${{ secrets.AWS_REGION }}

jobs:
  Validation:
    name: Validate Terraform code in dev
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: .
    env:
      TF_WORKSPACE: dev
      artifact_name: dev-tfplan-${{ github.ref_name }}-${{ github.run_id }}-${{ github.run_attempt }}

    steps:
      - name: Git checkout
        uses: actions/checkout@master

      - name: Configure AWS credentials from AWS account
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id:  ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.2.5
      
      - name: Terraform init
        id: init
        run: terraform -chdir=terraform init

      - name: Terraform format
        id: format
        run: terraform -chdir=terraform fmt -check

      - name: Terraform validate
        id: validate
        run: terraform -chdir=terraform validate -no-color

  BuildDev:
    name: Build the plan file for dev
    needs: [Validation]
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: .
    env:
      TF_WORKSPACE: dev

    steps:
      - name: Git checkout
        uses: actions/checkout@master

      - name: Configure AWS credentials from AWS account
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id:  ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.2.5
      
      - name: Terraform init
        id: init
        run: terraform -chdir=terraform init
        env:
          TF_WORKSPACE: dev

      - name: Terraform plan
        id: plan
        run: terraform -chdir=terraform plan -no-color -out $artifact_name
        # env:
        #   TF_WORKSPACE: dev
        # if: github.event_name == 'pull_request'
        # continue-on-error: true
      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            }) 

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Upload artifact for deployment
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.TF_WORKSPACE }}-execution-plan
          path: $artifact_name

      # - name: Terraform Apply
      # id: apply
      # if: github.event_name == 'push'
      # run: terraform -chdir=terraform apply -auto-approve
      # env:
      #   TF_WORKSPACE: dev