name: "Terraform action"
on:
  push:
    branches:
      - prd
  pull_request:
permissions:
      id-token: write # This is required for aws oidc connection
      contents: read # This is required for actions/checkout
      pull-requests: write # This is required for gh bot to comment PR
env:
  TF_LOG: TRACE
  AWS_REGION: ${{ secrets.AWS_REGION }}
jobs:
  deploy:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: .
    steps:
      - name: Git checkout
        uses: actions/checkout@v3

      - name: Terraform init
        id: ini
        uses: hashicorp/terraform-github-actions/init@v0.4.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TF_ACTION_WORKING_DIR: 'terraform'
          AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Terraform Validate
        id: validate
        uses: hashicorp/terraform-github-actions/validate@v0.3.7

      - name: Terraform Apply
        uses: hashicorp/terraform-github-actions/apply@v0.4.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TF_ACTION_WORKING_DIR: 'terraform'
          AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#
#      - name: Terraform Plan
#        id: plan
#        run: terraform -chdir=terraform plan 
#        if: github.event_name == 'pull_request'
#        continue-on-error: true
#
#      - uses: actions/github-script@v6
#        if: github.event_name == 'pull_request'
#        env:
#          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
#        with:
#          github-token: ${{ secrets.GITHUB_TOKEN }}
#          script: |
#            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
#            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
#            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
#            <details><summary>Validation Output</summary>
#
#            \`\`\`\n
#            ${{ steps.validate.outputs.stdout }}
#            \`\`\`
#
#            </details>
#
#            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
#
#            <details><summary>Show Plan</summary>
#
#            \`\`\`\n
#            ${{ steps.plan.outputs.stdout }}
#            \`\`\`
#
#            </details>
#
#            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
#
#            github.rest.issues.createComment({
#              issue_number: context.issue.number,
#              owner: context.repo.owner,
#              repo: context.repo.repo,
#              body: output
#            })
#
#      - name: Terraform Plan Status
#        if: steps.plan.outcome == 'failure'
#        run: exit 1
#
#      - name: Terraform Apply
#        id: apply
#        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
#        run: terraform -chdir=terraform apply -auto-approve -input=false